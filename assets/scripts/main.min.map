{"version":3,"sources":["skip.js","service.js","main.js","top.js"],"names":["simulateClick","element","eventOptions","window","MouseEvent","bubbles","cancelable","view","dispatchEvent","initialize","console","log","activateStickyScrollPadding","getContactEmail","getNetworkStatus","getSound","navItem","document","querySelector","navItemHeight","offsetHeight","documentElement","style","setProperty","concat","navigator","serviceWorker","register","then","addEventListener","event","target","key","classList","contains","history","pushState","title","location","pathname","menu","getOverlay","overlayItem","getAttribute","setAttribute","previousElementSibling","textContent","contactItems","querySelectorAll","Array","from","forEach","contact","getContactEvent","id","emailData","replace","removeAttribute","status","online","offline","updateNetworkStatus","onLine","setTimeout","entryValue","sections","initialSections","darkColors","value","split","clearCanvas","totalSections","length","arc","canvasConstantTAU","drawSections","emptySections","canvasContext","colors","disabledColors","random","m","M","Math","spinElement","canvasElement","getContext","result","imageSmoothingEnabled","article","reset","canvasDiameter","canvas","width","canvasRadius","canvasCircumference","PI","friction","angleVelocityMin","angleVelocityMax","angleVelocity","angle","isSpinning","isAccelerating","animateFrame","getIndex","floor","beginPath","lineWidth","strokeStyle","stroke","section","index","save","fillStyle","moveTo","lineTo","fill","rotate","textAlign","font","fillText","restore","formatInputSectionValues","frame","audio","playbackRate","cancelAnimationFrame","isOn","stopSound","engine","requestAnimationFrame","playSound","initialResult","initialArticle","items","formattedValues","repaintSections","parentNode","remove","removeSection","item","filter","hasAttribute","clearRect","height","resetCanvas","transform","Audio","audioOn","checked","currentTime","play","loop","volume","pause","displayTop","up","body","scrollTop","getTop","scrollToTop","scrollStep","scrollY","scrollInterval","setInterval","scrollBy","clearInterval"],"mappings":"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","file":"main.min.js","sourcesContent":["// Simulate Click\r\ndocument.addEventListener(\"keydown\", (event) => {\r\n  const element = event.target;\r\n  //   console.log(element)\r\n  if (event.key === \"Enter\") {\r\n    if (element.classList.contains(\"skip\")) {\r\n      simulateClick(element);\r\n\r\n      if (history.pushState) {\r\n        history.pushState(\"\", document.title, window.location.pathname);\r\n      } else {\r\n        location = \"/\";\r\n      }\r\n    }\r\n  }\r\n});\r\n\r\nfunction simulateClick(element) {\r\n  // Create our event (with options)\r\n  const eventOptions = new window.MouseEvent(\"click\", {\r\n    bubbles: true,\r\n    cancelable: true,\r\n    view: window,\r\n  });\r\n  // If cancelled, don't dispatch our event\r\n  const cancelled = !element.dispatchEvent(eventOptions);\r\n\r\n  if (cancelled) {\r\n    // A handler called preventDefault.\r\n    // console.log('cancelled')\r\n  } else {\r\n    // None of the handlers called preventDefault.\r\n    // console.log('not cancelled')\r\n  }\r\n}","// Check the browser to make sure it supports service workers\r\nif('serviceWorker' in navigator) {\r\n    navigator.serviceWorker\r\n    // Register the path to the service worker file\r\n    .register('./serviceWorker.js')\r\n    .then(function() {\r\n        console.log('Service Worker is Registered');\r\n    })\r\n}","// Initialize\r\nwindow.addEventListener(\"load\", initialize);\r\n\r\nfunction initialize() {\r\n  console.log(\"Welcome! 👋\");\r\n  activateStickyScrollPadding();\r\n  getContactEmail();\r\n  getNetworkStatus();\r\n  getSound();\r\n}\r\n\r\n// Scrolling\r\nfunction activateStickyScrollPadding() {\r\n  const navItem = document.querySelector(\".navbar\");\r\n  if (navItem) {\r\n    const navItemHeight = navItem.offsetHeight;\r\n\r\n    document.documentElement.style.setProperty(\r\n      \"--scroll-padding\",\r\n      `${navItemHeight}px`\r\n    );\r\n  }\r\n}\r\n\r\nlet menu = document.querySelector(\"button#menu\");\r\nif (menu) {\r\n  menu.addEventListener(\"click\", getOverlay);\r\n}\r\n\r\nfunction getOverlay() {\r\n  let overlayItem = document.querySelector(\"#info[data-open]\");\r\n\r\n  if (overlayItem.getAttribute(\"data-open\") == \"false\") {\r\n    overlayItem.setAttribute(\"data-open\", \"true\");\r\n    overlayItem.previousElementSibling.setAttribute(\"data-open\", \"false\");\r\n    menu.textContent = \"Close Info\";\r\n  } else {\r\n    overlayItem.setAttribute(\"data-open\", \"false\");\r\n    overlayItem.previousElementSibling.setAttribute(\"data-open\", \"true\");\r\n    menu.textContent = \"Info\";\r\n  }\r\n}\r\n\r\n// Email\r\nfunction getContactEmail() {\r\n  let contactItems = document.querySelectorAll(\"[data-email]\");\r\n  let contactArray = Array.from(contactItems);\r\n\r\n  contactArray.forEach((contact) => {\r\n    document.addEventListener(\"click\", (event) => {\r\n      getContactEvent(event);\r\n    });\r\n\r\n    document.addEventListener(\"keydown\", (event) => {\r\n      if (event.key === \"Enter\") {\r\n        getContactEvent(event);\r\n      }\r\n    });\r\n\r\n    function getContactEvent(event) {\r\n      if (contact.id == event.target.id) {\r\n        let emailData = \"helloATfebreroDOTinfo\";\r\n        emailData = emailData.replace(/AT/, \"@\").replace(/DOT/, \".\");\r\n        contact.setAttribute(\"data-email\", \"true\");\r\n        contact.setAttribute(\"href\", `mailto:${emailData}`);\r\n      } else {\r\n        contact.setAttribute(\"data-email\", \"false\");\r\n        contact.removeAttribute(\"data-value\");\r\n        contact.removeAttribute(\"href\");\r\n        contact.removeAttribute(\"rel\");\r\n        contact.removeAttribute(\"target\");\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n// Network\r\nfunction getNetworkStatus() {\r\n  let status = document.querySelector(\"#status\");\r\n  let online = document.querySelector(\"#online\");\r\n  let offline = document.querySelector(\"#offline\");\r\n\r\n  function updateNetworkStatus() {\r\n    let condition = navigator.onLine ? \"online\" : \"offline\";\r\n\r\n    if (condition === \"offline\") {\r\n      status.setAttribute(\"data-open\", \"true\");\r\n      offline.setAttribute(\"data-open\", \"true\");\r\n      online.setAttribute(\"data-open\", \"false\");\r\n    } else {\r\n      status.setAttribute(\"data-open\", \"true\");\r\n      online.setAttribute(\"data-open\", \"true\");\r\n      offline.setAttribute(\"data-open\", \"false\");\r\n\r\n      setTimeout(() => {\r\n        online.setAttribute(\"data-open\", \"false\");\r\n        status.setAttribute(\"data-open\", \"false\");\r\n      }, 5800);\r\n    }\r\n  }\r\n\r\n  window.addEventListener(\"online\", updateNetworkStatus);\r\n  window.addEventListener(\"offline\", updateNetworkStatus);\r\n}\r\n\r\n// Spin\r\n// input\r\nconst entryValue = document.querySelector(\"#section\");\r\n\r\nlet sections = [\r\n  \"January\",\r\n  \"February\",\r\n  \"March\",\r\n  \"April\",\r\n  \"May\",\r\n  \"June\",\r\n  \"July\",\r\n  \"August\",\r\n  \"September\",\r\n  \"October\",\r\n  \"November\",\r\n  \"December\",\r\n];\r\n\r\nlet initialSections = [\r\n  \"January\",\r\n  \"February\",\r\n  \"March\",\r\n  \"April\",\r\n  \"May\",\r\n  \"June\",\r\n  \"July\",\r\n  \"August\",\r\n  \"September\",\r\n  \"October\",\r\n  \"November\",\r\n  \"December\",\r\n];\r\n\r\nif (entryValue) {\r\n  entryValue.addEventListener(\"keyup\", () => {\r\n    let value = entryValue.value;\r\n    if (value !== \"\") {\r\n      sections = value.split(\"\\n\");\r\n\r\n      clearCanvas();\r\n      totalSections = sections.length;\r\n      arc = canvasConstantTAU / totalSections;\r\n      sections.forEach(drawSections);\r\n    }\r\n\r\n    if (value.length <= 1) {\r\n      value = \"\";\r\n      sections = value;\r\n\r\n      clearCanvas();\r\n      emptySections();\r\n    }\r\n\r\n    // console.log(\"sections\", sections, sections.length);\r\n  });\r\n\r\n  entryValue.addEventListener(\"keydown\", () => {\r\n    let value = entryValue.value;\r\n  });\r\n}\r\n\r\nconst darkColors = [\r\n  \"#FF0000\",\r\n  \"#FF7F00\",\r\n  \"#FFFF00\",\r\n  \"#7FFF00\",\r\n  \"#00FF00\",\r\n  \"#00FF7F\",\r\n  \"#00FFFF\",\r\n  \"#007FFF\",\r\n  \"#0000FF\",\r\n  \"#7F00FF\",\r\n  \"#FF00FF\",\r\n  \"#FF007F\",\r\n];\r\n\r\nconst colors = [\r\n  \"#FF6161\",\r\n  \"#FF7F00\",\r\n  \"#FFFF00\",\r\n  \"#7FFF00\",\r\n  \"#00FF00\",\r\n  \"#00FF7F\",\r\n  \"#00FFFF\",\r\n  \"#007FFF\",\r\n  \"#8A8AFF\",\r\n  \"#BA75FF\",\r\n  \"#FF29FF\",\r\n  \"#FF52A8\",\r\n];\r\n\r\nconst disabledColors = [\r\n  \"#c7c8ca\",\r\n  \"#c7c8ca\",\r\n  \"#c7c8ca\",\r\n  \"#c7c8ca\",\r\n  \"#c7c8ca\",\r\n  \"#c7c8ca\",\r\n  \"#c7c8ca\",\r\n  \"#c7c8ca\",\r\n  \"#c7c8ca\",\r\n  \"#c7c8ca\",\r\n  \"#c7c8ca\",\r\n  \"#c7c8ca\",\r\n];\r\n\r\n// canvas\r\n// Generate random float in range min-max:\r\nconst random = (m, M) => Math.random() * (M - m) + m;\r\n\r\n// const totalSections = sections.length;\r\nlet totalSections = sections.length;\r\nconst spinElement = document.querySelector(\"#spin\");\r\nconst canvasElement = document.querySelector(\"#wheel\");\r\nconst canvasContext = canvasElement.getContext(\"2d\");\r\ncanvasContext.imageSmoothingEnabled = true;\r\n\r\nconst result = document.querySelector(\"#result\");\r\nconst article = document.querySelector(\"#article\");\r\nconst reset = document.querySelector(\"#reset\");\r\nconst canvasDiameter = canvasContext.canvas.width;\r\nconst canvasRadius = canvasDiameter / 2;\r\nconst canvasCircumference = Math.PI;\r\nconst canvasConstantTAU = 2 * canvasCircumference;\r\n// const arc = canvasConstantTAU / totalSections;\r\nlet arc = canvasConstantTAU / totalSections;\r\nconst friction = 0.991; // 0.995=soft, 0.99=mid, 0.98=hard\r\nconst angleVelocityMin = 0.002; // Below that number will be treated as a stop\r\nlet angleVelocityMax = 0; // Random ang.vel. to accelerate to\r\nlet angleVelocity = 0; // Current angular velocity\r\nlet angle = 0; // Angle rotation in radians\r\nlet isSpinning = false;\r\nlet isAccelerating = false;\r\nlet animateFrame = null; // Engine's requestAnimationFrame\r\n\r\n//* Get index of current sector */\r\nconst getIndex = () =>\r\n  Math.floor(totalSections - (angle / canvasConstantTAU) * totalSections) %\r\n  totalSections;\r\n\r\nfunction emptySections() {\r\n  canvasContext.beginPath();\r\n  canvasContext.arc(\r\n    canvasRadius,\r\n    canvasRadius,\r\n    canvasRadius - 5,\r\n    0,\r\n    2 * Math.PI\r\n  );\r\n  canvasContext.lineWidth = 5;\r\n  canvasContext.strokeStyle = \"#333\";\r\n  canvasContext.stroke();\r\n}\r\n\r\n//* Draw sectors and prizes texts to canvas */\r\nfunction drawSections(section, index) {\r\n  const angle = arc * index;\r\n  canvasContext.save();\r\n  // COLOR\r\n  canvasContext.beginPath();\r\n  canvasContext.fillStyle = colors[index % 12];\r\n  canvasContext.moveTo(canvasRadius, canvasRadius);\r\n  canvasContext.arc(\r\n    canvasRadius,\r\n    canvasRadius,\r\n    canvasRadius - 5, // Add negative space around the wheel\r\n    angle,\r\n    angle + arc\r\n  );\r\n  canvasContext.lineTo(canvasRadius, canvasRadius);\r\n  canvasContext.fill();\r\n\r\n  // OUTLINE\r\n  canvasContext.lineWidth = 5;\r\n  canvasContext.strokeStyle = \"#333\";\r\n  canvasContext.stroke();\r\n\r\n  // TEXT\r\n  canvasContext.translate(canvasRadius, canvasRadius);\r\n  canvasContext.rotate(angle + arc / 2);\r\n  canvasContext.textAlign = \"right\";\r\n  canvasContext.fillStyle = \"#333\";\r\n  canvasContext.font = \"bold 20px sans-serif\";\r\n  canvasContext.fillText(section, canvasRadius - 20, 5);\r\n  //\r\n  canvasContext.restore();\r\n}\r\n\r\n//* CSS rotate CANVAS Element */\r\nfunction rotate() {\r\n  const section = sections[getIndex()];\r\n  canvasContext.canvas.style.transform = `rotate(${\r\n    angle - canvasCircumference / 2\r\n  }rad)`;\r\n\r\n  if (!angleVelocity) {\r\n    result.textContent = section;\r\n\r\n    article.textContent = section;\r\n    article.parentNode.removeAttribute(\"disabled\");\r\n\r\n    reset.removeAttribute(\"disabled\");\r\n  }\r\n}\r\n\r\nfunction frame() {\r\n  if (!isSpinning) return;\r\n\r\n  if (angleVelocity >= angleVelocityMax) isAccelerating = false;\r\n\r\n  // Accelerate\r\n  if (isAccelerating) {\r\n    angleVelocity ||= angleVelocityMin; // Initial velocity kick\r\n    angleVelocity *= 1.06; // Accelerate\r\n    audio.playbackRate = 1.06;\r\n  }\r\n\r\n  // Decelerate\r\n  else {\r\n    isAccelerating = false;\r\n    angleVelocity *= friction; // Decelerate by friction\r\n    audio.playbackRate = friction;\r\n\r\n    // SPIN END:\r\n    if (angleVelocity < angleVelocityMin) {\r\n      isSpinning = false;\r\n      angleVelocity = 0;\r\n      cancelAnimationFrame(animateFrame);\r\n      if (isOn === true) {\r\n        stopSound();\r\n      }\r\n    }\r\n  }\r\n\r\n  angle += angleVelocity; // Update angle\r\n  angle %= canvasConstantTAU; // Normalize angle\r\n  rotate(); // CSS rotate!\r\n}\r\n\r\nfunction engine() {\r\n  frame();\r\n  animateFrame = requestAnimationFrame(engine);\r\n}\r\n\r\nspinElement.addEventListener(\"click\", () => {\r\n  if (isSpinning) return;\r\n  isSpinning = true;\r\n  isAccelerating = true;\r\n  angleVelocityMax = random(0.25, 0.4);\r\n  engine(); // Start engine!\r\n  if (isOn === true) {\r\n    playSound();\r\n  }\r\n});\r\n\r\n// INIT!\r\nsections = initialSections;\r\nformatInputSectionValues(sections);\r\n\r\nsections.forEach(drawSections);\r\nrotate(); // Initial rotation\r\n\r\nresult.textContent = \"\";\r\nlet initialResult = result.textContent;\r\n\r\narticle.textContent = \"selected item\";\r\nlet initialArticle = article.textContent;\r\n\r\narticle.parentNode.setAttribute(\"disabled\", \"\");\r\nreset.setAttribute(\"disabled\", \"\");\r\n\r\n// Prep\r\nfunction formatInputSectionValues(items) {\r\n  entryValue.value = items;\r\n  let formattedValues = entryValue.value.replace(/,/g, \"\\n\");\r\n  entryValue.value = formattedValues;\r\n}\r\n\r\nfunction repaintSections() {\r\n  totalSections = sections.length;\r\n  arc = canvasConstantTAU / totalSections;\r\n  sections.forEach(drawSections);\r\n}\r\n\r\n// Remove\r\nconst remove = document.querySelector(\"#remove\");\r\n\r\nremove.addEventListener(\"click\", removeSection);\r\n\r\nfunction removeSection() {\r\n  const item = sections[getIndex()];\r\n  sections = sections.filter((section) => section !== item);\r\n  // console.log(\"winner removed =>\", `${item} from ${sections}`);\r\n\r\n  formatInputSectionValues(sections);\r\n  clearCanvas();\r\n  repaintSections();\r\n\r\n  if (sections.length <= 0) {\r\n    emptySections();\r\n  }\r\n\r\n  if (article.parentNode.hasAttribute(\"disabled\") !== \"false\") {\r\n    article.parentNode.setAttribute(\"disabled\", \"\");\r\n    article.textContent = initialArticle;\r\n    result.textContent = initialResult;\r\n  }\r\n}\r\n\r\n// Clear and Reset\r\nreset.addEventListener(\"click\", resetCanvas);\r\n\r\nfunction clearCanvas() {\r\n  canvasContext.clearRect(\r\n    0,\r\n    0,\r\n    canvasContext.canvas.width,\r\n    canvasContext.canvas.height\r\n  );\r\n  canvasContext.arc(\r\n    canvasRadius,\r\n    canvasRadius,\r\n    canvasRadius - 5,\r\n    0,\r\n    2 * Math.PI\r\n  );\r\n  canvasContext.fillStyle = \"rgba(32, 35, 42, .15)\";\r\n  canvasContext.fill();\r\n}\r\n\r\nfunction resetCanvas() {\r\n  sections = initialSections;\r\n  formatInputSectionValues(sections);\r\n  clearCanvas();\r\n  repaintSections();\r\n\r\n  canvasContext.canvas.style.transform = `rotate(-1.5708rad)`;\r\n\r\n  result.textContent = initialResult;\r\n  article.textContent = initialArticle;\r\n\r\n  if (reset.hasAttribute(\"disabled\") !== \"false\") {\r\n    reset.setAttribute(\"disabled\", \"\");\r\n  }\r\n}\r\n\r\nconst audio = new Audio(\"./assets/sounds/flow.mp3\");\r\nconst audioOn = document.querySelector(\"#sound\");\r\nlet isOn = false;\r\n\r\nfunction getSound() {\r\n  if (audioOn) {\r\n    audioOn.addEventListener(\"change\", () => {\r\n      if (audioOn.checked) {\r\n        isOn = true;\r\n      } else {\r\n        isOn = false;\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction playSound() {\r\n  audio.currentTime = 0;\r\n  audio.play();\r\n  audio.loop = true;\r\n  audio.volume = 0.3;\r\n}\r\n\r\nfunction stopSound() {\r\n  audio.pause();\r\n}\r\n","// Scroll To Top\r\nwindow.addEventListener(\"scroll\", displayTop);\r\n\r\nfunction displayTop() {\r\n  const up = document.querySelector(\"#up\");\r\n\r\n  if (up) {\r\n    if (\r\n      document.body.scrollTop >= 375 ||\r\n      document.documentElement.scrollTop >= 375\r\n    ) {\r\n      up.setAttribute(\"data-open\", \"true\");\r\n    } else {\r\n      up.setAttribute(\"data-open\", \"false\");\r\n    }\r\n\r\n    up.addEventListener(\"click\", getTop, scrollToTop);\r\n  }\r\n}\r\n\r\n// IE and Edge Function\r\nfunction getTop() {\r\n  document.body.scrollTop = 0;\r\n  document.documentElement.scrollTop = 0;\r\n}\r\n\r\n// Angular Compatible Function\r\nfunction scrollToTop() {\r\n  let scrollStep = -window.scrollY / (500 / 15);\r\n  let scrollInterval = setInterval(() => {\r\n    if (window.scrollY !== 0) {\r\n      window.scrollBy(0, scrollStep);\r\n    } else clearInterval(scrollInterval);\r\n  }, 15);\r\n}\r\n"]}